FROM --platform=$TARGETPLATFORM ubuntu:22.04 AS base

# Chisel 3 docker image for Chip Dev
# ==========
# Fangrui Liu / fangrui.liu@outlook.com / 2023

ARG TARGETARCH
USER root

RUN apt-get update && apt-get upgrade -y && apt install ca-certificates -y

FROM base AS base-amd64
RUN echo "deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse\n" > /etc/apt/sources.list; \
    echo "deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse\n" >> /etc/apt/sources.list; \
    echo "deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse\n" >> /etc/apt/sources.list; \
    echo "deb http://security.ubuntu.com/ubuntu/ jammy-security main restricted universe multiverse\n" >> /etc/apt/sources.list;

FROM base AS base-arm64
RUN echo "deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ jammy main restricted universe multiverse" > /etc/apt/sources.list; \ 
    echo "deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ jammy-updates main restricted universe multiverse" >> /etc/apt/sources.list; \ 
    echo "deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ jammy-backports main restricted universe multiverse" >> /etc/apt/sources.list; \ 
    echo "deb http://ports.ubuntu.com/ubuntu-ports/ jammy-security main restricted universe multiverse" >> /etc/apt/sources.list; 

FROM base-${TARGETARCH} AS env
RUN apt-get update && apt-get install default-jdk sudo git make autoconf g++ flex bison curl wget gnupg -y && apt-get clean -y

# install firtool
RUN wget -q -O - https://github.com/llvm/circt/releases/download/firtool-1.38.0/firrtl-bin-ubuntu-20.04.tar.gz | tar -zx && mv firtool-1.38.0/bin/firtool /usr/local/bin/

WORKDIR /workspace/

RUN git clone https://github.com/verilator/verilator && cd /workspace/verilator && git pull && git checkout v4.226 && autoconf && ./configure && make -j8 && make install && make clean && rm -rf /workspace/verilator

WORKDIR /workspace/

# accessibility
RUN apt install net-tools -y && apt clean -y

FROM env AS scala-amd64
# install sbt
# Reference: https://www.scala-sbt.org/download.html
RUN curl -fL https://github.com/coursier/coursier/releases/latest/download/cs-x86_64-pc-linux.gz | gzip -d > cs && chmod +x cs && ./cs setup -y && rm -rf cs-x86_64-pc-linux.gz

# if arm64
FROM env AS scala-arm64
RUN curl -fL https://github.com/VirtusLab/coursier-m1/releases/latest/download/cs-aarch64-pc-linux.gz | gzip -d > cs && chmod +x cs && ./cs setup -y && rm -rf cs-aarch64-pc-linux.gz

# build chisel
FROM scala-${TARGETARCH}
ENV PATH="${PATH}:/root/.local/share/coursier/bin/"
RUN git clone https://github.com/chipsalliance/chisel.git && cd /workspace/chisel/ && git checkout v5.1.0 && sbt compile && sbt "unipublish / publishLocal" && rm -rf /workspace/chisel

# clean up chisel sources
WORKDIR /workspace/
ENV COURSIER_CACHE="/workspace/.cache/coursier/v1"
CMD ["bash"]
